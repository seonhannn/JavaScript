let name = "jiseon"; // 문자형 string
name = "google";

// let 한번 선언 후 데이터를 바꿀 수 있음

const age = 20;

// const는 한번 선언 후 데이터를 바꿀 수 없음
// 변수는 문자, 숫자, $, _만 사용
// 첫글자는 숫자가 될 수 없음
// 예약어 사용 불가
// 상수는 대문자로 선언하는 것이 좋음
// 변수명은 이해하기 쉽게 선언

// 문자형은 ", ', ` 사용 가능
// 역슬래시로 문자로 인식하게 할 수 있음

const message = `My name is ${name}`;
console.log(message);

console.log(`${age+1}`);

// `와 ${}로 변수 사용 가능
// console.log로 화면에 나타냄 가능
// 사칙연산 가능
// 숫자를 0으로 나누면 무한대
// 문자열을 숫자로 나누면 NaN 숫자가 아니라는 의미

// Boolean true or false

console.log(age>19);

// null 존재하지 않는 값 undefined 값이 할당되지 않음

// typeof 연산자로 변수의 자료형 알아낼 수 있음

console.log(typeof 3);
console.log(typeof name);
console.log(typeof true);
console.log(typeof "hello");
console.log(typeof null);
console.log(typeof undefined);

// typeof null 결과 object가 나왔지만 null은 객체가 아님

const a = "나는 "
const b = 21

console.log(a + b + "세 입니다.");

// alert 알려줌 사용자와 상호작용하지 않음 단지 정보 전달용
// prompt 입력 받음 사용자에게 값을 입력받기 위해 사용 
// 인수를 두개 입력 가능 두번째 인수가 default 값
// confirm 확인 받음 true, false 값
/* 
const id = prompt("아이디를 입력하세요.");
alert("환영합니다. " + id + "님");
alert(`환영합니다, ${id}님.`);
alert 창을 취소 클릭하면 null 값이 들어감
*/

/*
const mathScore = prompt("수학 몇점?");
const engScore = prompt("영어 몇점?");
const result = (mathScore + engScore) / 2;
console.log(result);

prompt는 입력받은 숫자를 문자로 인식함
자동 형변환은 원하지 않는 결과가 나오게 할 수 있으므로 
명시적 형변환을 하도록 해야 함

String, Number, Boolean false 숫자 0, 빈 문자열, null, undefined, NaN
명시적 형변환을 할 때 앞의 문자를 대문자로 입력해야 함

Number(null) // 0
Number(undefined) // NaN

Number(0) // flase
Number("0") // true

Number('') // false
Number(' ') // true
*/

// 거듭제곱 **

// 연산자를 줄여서 쓸 수 있음

let num = 10;
num = num + 10;
num += 10;

// 증가 연산자, 감소 연산자
// 그 줄의 코드가 끝난 후 연산됨

num++;
num--;

// 코드가 실행되는 그 줄에서 먼저 연산됨

++num;
--num;

// 비교 연산자
// 1, "1" == true
// === 타입까지 확인해줌 즉 false

// if문 조건 확인 후 true이면 코드 실행

if(age > 19){
    console.log("성인입니다.");
}
else if(age < 19){
    console.log("미성년자입니다.");
}
else{
    console.log("19세입니다.");
}

// &&가 ||보다 우선 순위가 높음

// 명확한 횟수가 정해져 있으면 for문을, 정해져 있지 않다면 while문을 사용

// switch else if로 작성할 수 있지만 case가 많을 경우 보다 간결하여 사용

/*
함수 
function sayHello(name){ // 함수, 함수명, 매개변수
    console.log(`Hello, ${name}`);
}

sayHello('Mike');

매개변수를 없게 하려면 작성하지 않으면 됨
*/

/*
function sayHello(name) {
    let msg = 'Hello';
    if(name){
        msg += ', ' + name; // `, ${name}`
    }
    console.log(msg);
}
}

sayHello('Mike');
*/

// 지역 변수를 전역 변수와 같은 이름으로 선언할 수 있음 let도 가능

// 함수 return 으로 값 반환

// 함수에서 return은 함수를 종료하는 목적으로 사용하기도 한다.

// 함수 선언문은 어디서든 호출 가능하나, 함수 표현식은 함수에 도달해야 사용 가능하다.

// 호이스팅

// 화살표 함수

let showError = () => {
    console.log('error');
}

// 객체

const superman = {
    name : 'clark',
    age : 23,
}

// 객체 접근시 점, 대괄호 사용
// 객체 삭제시 delete 키워드 사용

// 단축 프로퍼티

const name = 'clark';
const age = 33;

const superman = {
    name,
    age,
    gender : 'male',
}

// 프로퍼티 존재 여부 확인 in 사용, 
// for in 문

const superman = {
    name : 'clark',
    age : 30,
}

console.log(superman.name)
console.log(superman[name])

superman.haircolor = 'black'
delete.superman.age;

function makeObject(name, age){
    return {
        name,
        age,
        hobby : 'football'
    }
}

const Mike = makeObject('mike', 30);
console.log(Mike);

console.log('age' in Mike);
console.log('birthday' in Mike);

function isAdult(user){
    if(!('age' in user) || user.age < 20){
        return false;
    } else {
        return true;
    }
}

const Mike = {
    name : 'Mike',
    age : 30,
}

const Jane = {
    name : 'Jane',
}

for(key in Mike){
    console.log(Mike[key])
}

// 객체 프로퍼티로 할당 된 함수를 메서드라고 한다.
// 자바스크립트의 this 

let students = ['mike', 'jane', 'sunny'];

// 배열은 순서가 있는 리스트이다. 숫자, 객체, 문자, 함수 등 포함 가능
// push는 배열 끝에 추가
// pop은 배열 끝 요소를 제거
// shift, unshift 배열 앞에 추가/제거 여러 개도 가능
// for .length로 길이 알 수 있다
// for of 

let days = ['mon', 'tue', 'wed'];
days[1] = '화요일'
console.log(days.length);
days.push('thu');
days.shift('sun');

for(let index = 0; index < days.length; index++) {
    console.log(days[index]);
}

for (let day of days) {
    console.log(day);
}
